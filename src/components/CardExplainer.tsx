'use client'

import { Button, Text, Popover, Stack, Badge, Group } from '@mantine/core'
import { IconBrain, IconLoader2 } from '@tabler/icons-react'
import { useState } from 'react'
import { supabase } from '@/lib/supabase'

interface CardExplainerProps {
  cardId: string
  title: string
  facts: string[]
  scoreboard: Record<string, number>
}

export function CardExplainer({ cardId, title, facts, scoreboard }: CardExplainerProps) {
  const [loading, setLoading] = useState(false)
  const [summary, setSummary] = useState<string | null>(null)
  const [error, setError] = useState<string | null>(null)

  const fetchSummary = async () => {
    setLoading(true)
    setError(null)

    try {
      // Check cache first
      const { data: cached } = await supabase
        .from('ai_summaries')
        .select('summary, generated_at')
        .eq('card_id', cardId)
        .single()

      if (cached) {
        const cacheAge = Date.now() - new Date(cached.generated_at).getTime()
        const cacheValid = cacheAge < 24 * 60 * 60 * 1000 // 24 hours

        if (cacheValid) {
          setSummary(cached.summary)
          setLoading(false)
          return
        }
      }

      // Generate new summary
      const { data: { user } } = await supabase.auth.getUser()
      const response = await fetch('/api/ai/explain-card', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          cardId,
          userId: user?.id
        })
      })

      const data = await response.json()

      if (response.ok) {
        setSummary(data.summary)
      } else {
        setError(data.error || 'Failed to generate summary')
      }
    } catch (err) {
      setError('An error occurred while generating the summary')
    }

    setLoading(false)
  }

  return (
    <Popover width={300} position="bottom" withArrow shadow="md">
      <Popover.Target>
        <Button
          variant="light"
          leftSection={loading ? <IconLoader2 className="animate-spin" /> : <IconBrain />}
          onClick={fetchSummary}
          loading={loading}
        >
          Explain
        </Button>
      </Popover.Target>

      <Popover.Dropdown>
        <Stack>
          {error ? (
            <Text c="red" size="sm">{error}</Text>
          ) : summary ? (
            <>
              <Text size="sm">{summary}</Text>
              <Group gap="xs">
                <Text size="xs" c="dimmed">Generated by AI</Text>
                <Badge size="xs" variant="light">Beta</Badge>
              </Group>
            </>
          ) : (
            <Text size="sm" c="dimmed">
              Click to generate an AI explanation of this card
            </Text>
          )}
        </Stack>
      </Popover.Dropdown>
    </Popover>
  )
}
